openapi: 3.0.0
info:
  title: HUI API
  version: 1.0.0
servers:
  - url: 'localhost:8080'
paths:
  /user:
    get:
      summary: List of all public users
      operationId: List Users
      responses:
        200:
          description: Users List
    post:
      operationId: Register User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/User'
            example:
              {
                username: newUsername,
                email: newUser@gmail.com,
                password: mypassword123,
                fullName: New User
                role : user
              }
      responses:
        200:
          description: User registered
        400:
          description: Missing one or more fields (password, fulname, username, email)
  /user/{id}:
    get:
      operationId: Get User
      summary: A single User by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            default: 2
            minimum: 1
          description: A numeric id for the user
      responses:
        200:
          description: User data
        404:
          description: User not found
    put:
      operationId: Update User
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            minimum: 1
            default: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/User'
            example:
              {
                password: anotherpassword123,
                user: {
                  username: updatedUser,
                  email: updatedUser@gmail.com,
                  password: myUpdatedPassword123,
                  fullName: Updated Username
                }
              }
      responses:
        200:
          description: User updated
        400:
          description: Missing one or more fields (password, fulname, username, email)
        401:
          description: Incorrect password
        404:
          description: User not found
    delete:
      operationId: Delete User
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            minimum: 1
            default: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              {
                password: anotherpassword123
              }
      responses:
        200:
          description: User deleted
        400:
          description: User not found
  /categories:
    summary: List all the categories with its full data
    get:
      operationId: List Categories
      responses:
        '200':
          description: Categories listed
  '/categories/{id}':
    summary: Get one category with its data
    get:
      operationId: Get Category
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Category data
        404:
          description: Category not found
  /categories/{id}/subcategories:
    get:
      operationId: Get Subcategories
      summary: Subcategories of a category by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Subcategories
        404:
          description: Category not found
  /categories/list:
    get:
      operationId: Get Caterories by IDs
      summary: List of categories given a Integer List
      requestBody:
        required: true
        content:
          application/json:
            example:
              [ 1,2,3,4 ]
      responses:
        200:
          description: Category List
        400:
          description: One of the categories not found
  /events:
    get:
      operationId: List Events
      responses:
        '200':
          description: Event list
    post:
      operationId: Register Event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/User'
            example:
              {
                title: Event title,
                description: Event description,
                categories: [ 1,2,3,4 ],
                organizer: 1
              }
      responses:
        200:
          description: Event registered
        400:
          description: User or category not found
  /events/{id}:
    summary: Get one event with its data
    get:
      operationId: Get Event
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            default: 1
            minimum: 1
      responses:
        200:
          description: Event data
        404:
          description: Event not found
    put:
      operationId: Update Event
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            default: 1
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Event'
            example:
              {
                password: "anotherpassword123",
                event: {
                  "id": 1,
                  "title": "Partido de fútbol",
                  "description": "Un partido de fútbol amistoso entre los del barrio",
                  "categories": [ 1,5 ],
                  "organizer": 1
                }

              }
      responses:
        200:
          description: Event updated
        404:
          description: Event id not found
        400:
          description: Required fields not found
    delete:
      operationId: Delete Event
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            default: 1
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            example:
              {
                password: "anotherpassword123"
              }
      responses:
        200:
          description: Event removed
  
  /events/{id}/enroll:
    put:
      operationId: Enroll User
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
            minimum: 1
            default: 1
      requestBody:
        required: true
        content:
          application/json:
            example:
              {
                password: "anotherpassword123",
                userId: 1
              }
      responses:
        200:
          description: User enrolled


components:
  schemas:
    Category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        parent:
          type: object
    User:
      type: object
      required:
        - id
        - email
        - username
        - fullname
        - password
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        username:
          type: string
        fullname:
          type: string
        password:
          type: string
        favorite_categories:
          type: array
          items: { }
    Event:
      type: object
      required:
        - id
        - title
        - organizer
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        organizer:
          type: object
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
security:
  - BasicAuth: [ ]